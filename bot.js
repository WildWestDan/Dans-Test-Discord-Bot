const { Client, Intents } = require('discord.js');
const { token } = require('./auth/auth.json');
 
const client = new Client({ intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] });

client.on('ready', () => {
  console.log(`Logged in as ${client.user.tag}!`);
  client.user.setActivity('For Questions', { type: 'WATCHING' });
  client.channels.cache.get("954069762315534356")
 //         .send('<a:TargetAnim:927671875834875974>')
});

client.on('messageCreate', msg => {
  if (msg.content === '!ping') {
    msg.channel.send('pong');
    console.log('ping');
  } else if (msg.content === '!commands') {
    msg.channel.send('1');
  } else if (msg.content === '!actions') {
    msg.channel.send(inline)('Actions are the way in which you can make the bot perform various things; think of them like steps in a cooking recipe. You can find the full list of Actions on our Wiki: https://github.com/SaviorXTanren/mixer-mixitup/wiki/Actions.');
  } else if (msg.content === '!backlog') {
    msg.channel.send('You can find our current backlog of feature requests here: https://trello.com/b/piWuuW4Y/feature-backlog.');
  } else if (msg.content === '!backup') {
    msg.channel.send('Backing up your settings allows you to hold on to a copy for save keeping or allow you to transfer your data to a new PC. There are two different types of backups supported; one-time backups allow you to make a quick backup of your data at that point in time, while automatic backups will backup your data automatically for you based on the time interval you set. You\'ll find both of these options by going to Settings -> Advanced. To restore a backup you have made, you must first log in with the account you want to apply the backup to and then head to Settings -> Advanced -> Restore Backup. \n \n We recommend that all users enable Weekly Automated Backups to help ensure that if any issues arise, you have a fairly recent backup of your data you can fall back on. It is important to note that this only backs up your settings, commands, & user data. It does NOT backup assets that are used in your command (EX: Images, Sounds, Videos). If you are transferring data from one PC to another, you will need to manually move those asset files over. They will also need to be in the exact same folder path as they were on the other PC, otherwise they will not work and you will need to go in to each command to update their folder path.');
  } else if (msg.content === '!botaccount') {
    msg.channel.send('A bot account is an account that can be used to send messages to chat on your behalf. To set up a bot account, you must first create a brand new account on the platform you are streaming on, which will act as your bot account. From there, once you have logged in as a Streamer with your regular account, head to the Accounts page and you will see an option to log in with a bot account for your streaming platform. It\'s important to note that when you click the Log In button for the bot account, it will automatically open a web page and attempt to log you in. So make sure before you do this, go into your default web browser, sign out from your Streamer account, sign in to your bot account, and then click the Log In button. You can then switch back to your Streamer account in your default web browser after the process completes.');
  } else if (msg.content === '!commandrunning') {
    msg.channel.send('The are three parts that factor in to when a command can run; Cooldowns, Waits, & Locks: \n\n - Cooldowns affect whether a command can get queued up to run or not. So if you had a chat command with a 10 minute cooldown, once the command has been queued up to run (not necessarily run yet), someone can\'t try to queue it up again for another 10 minutes. \n\n - Waits allow you to extend the length of a command to an arbitrary amount of time. So adding a 10 second wait to a command will physically make it take 10 seconds longer to complete. Adding a 10 second wait to anywhere in the command will always make it wait 10 seconds, however where you put a wait factors in to how the command itself will run. Think of it like a cooking recipe; if someone tells you to wait 10 minutes before putting pasta into boiling water VS someone telling you to wait 10 minutes after putting pasta into boiling water, those two steps aren\'t the same thing even though they have a 10 minute wait in them. \n\n - Locks are what restrict how many commands can be actively running at the same time (not the same as how many can queued up to run). This setting can be adjusted by heading to Settings -> Commands. The default option makes it so that only 1 command of every type can run at the same type (EX: Chat, Event, Timer, etc). So you can\'t have two Chat commands running at the same time, but you can have a Chat & Event running at the same time. Unlocked command ignore this and are run as soon as they are triggered.');
  } else if (msg.content === '!discordtag') {
    msg.channel.send('Tagging a role in Discord via Mix It Up is possible, but you must use the ID of the role as opposed to the name of the role. To get access to the ID for a role, you must first enable the Developer Mode option in the User Settings menu under App Settings -> Advanced. Once this is enabled, head to your server\'s role list in the Server Settings menu under Roles. Right-click the role you are looking to tag and select "Copy ID". \n\n Tagging a role by its ID uses the format "<@&roleid>", where "roleid" is the ID that was copied from the Roles menu for your server settings. For example, if your role ID was "1234", then you would use the following to tag that role: \n\n `<@&1234>`');
  } else if (msg.content === '!delay') {
    msg.channel.send('Some event commands have a delay on them due to one or more reasons. In almost all of these cases, these are delays that are typically out of our hands and are based on the way the service we are interacting with has designed things. \n\n For Twitch events with a delay, these are primarily due to how Twitch has designed it\'s event system. Twitch has two different event systems that can be used, PubSub & Web Hooks. As a desktop bot, we are able to use PubSub, but not Web Hooks. PubSub gives us access to a majority of the information we would want (Subs, Bits, Channel Points), however information related to stream updates & follows are only possible via Web Hooks. Because of this, we have to manually query for information on stream start & follows on a periodic basis, which causes the delay. Related events like stream stop & unfollow are not able to be used because there are not reliable ways to detect them. \n\n For donation/tipping events, it\'s reliant on the individual service and what it provides access to. Any services that have a way to get real-time events will be done in real-time. Services that do not have real-time events will have a delay on them as we periodically check for new donations/tips.');
  } else if (msg.content === '!logs') {
    msg.channel.send('Log files help us to diagnose what might be going wrong with your Mix It Up installation. Logs files can be sent to us in one of few ways: \n\n 1) If you are unable to log in to Mix It Up, do the following. Open Windows File Explorer (not the same as Windows Search) and in the top address bar, type the following:     %localappdata%/MixItUp/Logs   Inside this folder, find the most recent file by looking at the Date Modified column and send that file over. \n\n 2) If you are able to log in to Mix It Up, head to Settings -> Advanced -> Installation Folder, & navigate into the Logs folder in the Windows Explorer window that appears. Inside this folder, find the most recent file by looking at the Date Modified column and send that file over. \n\n 3) If the issue does not require assistance at this time and is purely for informational purposes, head to the About page and click on "Submit A Bug" in the top-left corner. Type in a description of what the issue was in as much detail as possible and include an email for us to reply back to you.');
  } else if (msg.content === '!mods') {
    msg.channel.send('Mix It Up and your settings for it only exist on your computer, there are no servers or online services that are controlling the bot functionality. So there is no way for you or moderators to access or edit your settings from another PC. Moderators for a channel currently only have the ability to create & update basic chat commands. The full list of moderator commands can be found here: https://github.com/SaviorXTanren/mixer-mixitup/wiki/Pre-Made-Chat-Commands#moderator-commands');
  } else if (msg.content === '!multimonitor') {
    msg.channel.send('Mix It Up saves the last location where you had the window opened and we try to put the window in the same location after you log in. Sometimes when logging in, you might not see the main window, but you will see Mix It Up in the taskbar. This typically means that Windows moved the main window very far off-screen, which is why you can\'t see it. \n\n To fix this, hover over the Mix It Up icon in the task bar, hold down the Shift key, and then right-click to open the context menu. From the context menu, click the "Move" option. Then just press any arrow key on your keyboard or move your mouse. You will be able to move the window back on the screen. \n\n Optionally, you can also delete your Application Settings file, which will reset the window position. However, this will reset things such as the Preview Program being enabled and your theme settings. To do this, head to the application folder by opening Windows Explorer and typing     %localappdata%/MixItUp    into the address bar. In this new folder, delete the ApplicationSettings.xml file.');
  } else if (msg.content === '!obsstudio') {
    msg.channel.send('The OBS Studio web socket allows you to interact with OBS Studio via the Streaming Software action. When installing the web socket, most users will be able to use the installer that is packaged alongside Mix It Up. \n\n However, if you have OBS Studio installed in a non-standard location, the installer will not be able to put the web socket plugin correctly into your OBS Studio installation. After running the installer and restarting OBS Studio, if you do not seeing a option titled "Websocket server settings" under the Tools menu, then the web socket plugin was not correctly installed. If that occurs, you will need to do a manual installation by downloading the latest ZIP file of the web socket plugin and un-zip it into your OBS Studio installation folder: \n\n https://github.com/obsproject/obs-websocket/releases/latest \n\n If you are not sure where your OBS Studio installation is located, you can find it by doing the following: \n - Launch OBS Studio \n - In the Windows taskbar at the bottom, right-click the OBS Studio block, then right-click OBS Studio in the pop-up menu that appears, then select Properties in the 2nd pop-up menu \n - In the Properties window that appears, click on the Shortcut tab, then click the "Open File Location" button');
  } else if (msg.content === '!overlay') {
    msg.channel.send('The Overlay can be enabled by heading to Services -> Overlay https://github.com/SaviorXTanren/mixer-mixitup/wiki/Services#overlay . When running into issues, make sure to check the following: \n\n - Make sure Mix It Up is started first before your streaming software, otherwise the Overlay "won\'t exist", so it won\'t load properly. \n - Make sure the resolution on the Overlay in your streaming software is set to 1920x1080. \n - Hit the Test Connection button under Services -> Overlay and make sure you see the red "Connection Test!" text appear on the overlay. \n - Ensure the options "Shutdown source when not visible" & "Refresh browser when scene becomes active" are checked on the web browser source within your Streaming Software. \n - If you have OBS Studio/Streamlabs OBS/XSplit service connectivity enabled, you can head to Services -> Overlay and type in the name of the web browser source in your streaming software in the text box on the right. This will auto-refresh the web browser source when we connect to your streaming software to ensure it is properly connected no matter which order you launch applications in.');
  } else if (msg.content === '!preview') {
    msg.channel.send('The preview program is an opportunity to help test our new features early and give feedback or suggestions on it; however the version you get to use can possibly be buggy or incomplete. Before starting a series of Preview updates, we encourage users to perform a manual backup of their settings by heading to Settings -> Advanced -> Backup Settings. To join the preview program, head to Settings -> General, toggle the "Update Preview Program" option, and restart Mix It Up to update to the preview version.');
  } else if (msg.content === '!settings') {
    msg.channel.send('Your settings files contain all of your commands & user data. To get access to your settings files, you can do one of two things: \n\n - Launch Mix It Up, head to Settings -> Advanced -> Installation Folder, & navigate into the Settings folder in the Windows Explorer window that appears \n\n - Open Windows File Explorer (not the same as Windows Search) and type the following into the address bar (The large text box at the top of the window): %localappdata%/MixItUp/Settings \n\n If you are sending your settings files to someone, you can reduce the size of them by selecting all of the files, right-click -> Send as -> Compressed Zipped Archive. DO NOT share out your settings files with anyone other than a Mix It Up Moderator or Developer and only when asked to. Your settings files contain your temporary authentication information to your various services (EX: Twitch, Streamlabs, etc). Although this is not your actual username & password, it can provide a way for a user to be able to do things with your account if they get it and have the knowledge.');
  } else if (msg.content === '!si') {
    msg.channel.send('Special Identifiers (also called variables in other bots) are a way to put special text into various areas of the bot which will automatically translate to a specific set of text (EX: $username => JoeSmoe). Special Identifiers that work in all features & areas can be found on the main Special Identifiers Wiki page: https://github.com/SaviorXTanren/mixer-mixitup/wiki/Special-Identifiers \n\n NOTE: Special Identifiers that are unique to a specific area can be found on the Wiki page for that corresponding feature. For example, if you want to see what Special Identifiers are usable for a specific event command, you would want to visit the Events page of the Wiki.');
  } else if (msg.content === '!sr') {
    msg.channel.send('Our Song Requests feature has been removed for a large amount of reasons that you can read below. This is a decision we made after many months of research and discussion. Although it\'s not one we\'re happy about, as it removes a feature that we know our users enjoy using, we feel it\'s in the best interest of our users and the future of the app. \n\n https://mixitupapp.com/songrequests');
  } else if (msg.content === '!uninstall') {
    msg.channel.send('Uninstalling Mix It Up consists of simply deleting the folder wherever you have it. If you downloaded the zip file version, it\'s just deleting the unzipped folder. If you ran the installer, all that does is just download the same zip and put it into your local app data; there\'s nothing actually "installed" like a regular program. You can get to your local app data folder by either: \n\n - Opening Mix It Up and heading to Settings -> Advanced -> Installation Folder \n - Opening Windows Explorer and typing the following into the address bar at the top:   %localappdata%/MixItUp \n\n If you  ran the installer, you\'ll also need to delete the folder on the Start Menu with the shortcut to run the application. Uninstalling the application, unless instructed in very specific circumstances, generally won\'t resolve any issues you might be running in to and isn\'t recommend as a means of trying to solve a problem you\'re having. Note also that deleting your installation also means deleting your associated data, as your settings & data only exists on your computer.');
  } else if (msg.content === '!unlockcommand') {
    msg.channel.send('By default, commands of the same type are locked together. This means that if two commands were to run at the same time (EX: 2 Chat commands), the 1st command would start running and the 2nd command will wait until the 1st is complete. This is designed to help prevent many commands of the same type from going off at the same time and cause some form of chaos. However, there can be circumstances in which you will want a command to always be able to run right away, regardless of if there are other commands of the same type already running. This can be done on a per-command basis or for all commands. \n\n Per-Command: An individual command can run outside of our locking system by toggling the "Unlock Command" option on it. This will ensure that this command always runs when it\'s triggered as long as all Usage Requirements are met (EX: The command is not already on cooldown). \n\n All Commands: In the Settings menu under the Commands section, there will be an option called "Command Lock System". This option controls how the command locking system works and on what specifically a command locks and prevents other commands from running. For details on how each option works, you can hover your mouse over the option for an explanation on how each option works.');
  } else if (msg.content === '!wait') {
    msg.channel.send('The Wait action allows you to block a command from continuing until the time is up. All actions do not wait for their work to complete (EX: A sound action only starts playing the sound, it does not wait for it to finish). The Wait action is the only exception to this. Wait Actions also prevent other commands of the same type from running, such as a series of Chat commands. It will ensure that another Chat command can not run until the current Chat command has finished. You can find more information about Wait action on our Wiki: https://github.com/SaviorXTanren/mixer-mixitup/wiki/Actions#wait');
  } else if (msg.content === '!whispers') {
    msg.channel.send('Whispers are supported on Twitch, but are highly discouraged from being used. Unlike on Mixer, Twitch does not intend whispers to be used as a form of automated communication. There are severe restrictions placed on the amount of whispers that can be sent in a timeline that make it very impractical for use, as well as spam preventative measures if the user is not on your friends list on Twitch. Additionally, the ways around these restrictions involve having either your user account or your personal bot account become a known/verified account, which is something entirely reliant on you the end user to do. \n\n https://dev.twitch.tv/docs/irc/guide#command--message-limits \n\n So although you can send whispers via Twitch, it\'s a "your mileage may very" situation. As a result, all automated whispers within Mix It Up (EX: error messages) and all future-created commands that relied on whispers (EX: Games) now either use regular chat messages or will no longer send a message. Any commands that you have with existing whispers in them will remain with that, but you will be responsible for converting them in to regular chat messages if necessary.');
  } else if (msg.content === '!wiki') {
    msg.channel.send('Our wiki contains a great deal of information about the bot and the things you can do in it. If you\'re ever lost when using the bot, look for a "?" button and click it, it will take you to a context-sensitive page about the topic you are looking at: https://github.com/SaviorXTanren/mixer-mixitup/wiki');
  }
});

//make sure this line is the last line
client.login(token); //login bot using token